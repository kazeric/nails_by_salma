{"version":3,"file":"content-source-maps.js","sources":["../../src/services/content-source-maps.ts"],"sourcesContent":["import { vercelStegaCombine } from '@vercel/stega';\nimport type { Core, Struct, UID } from '@strapi/types';\nimport { traverseEntity } from '@strapi/utils';\n\nconst ENCODABLE_TYPES = [\n  'string',\n  'text',\n  'richtext',\n  'biginteger',\n  'date',\n  'time',\n  'datetime',\n  'timestamp',\n  'boolean',\n  'enumeration',\n  'json',\n  'media',\n  'email',\n  'password',\n  /**\n   * We cannot modify the response shape, so types that aren't based on string cannot be encoded:\n   * - json: object\n   * - blocks: object, will require a custom implementation in a dedicated PR\n   * - integer, float and decimal: number\n   * - boolean: boolean (believe it or not)\n   * - uid: can be stringified but would mess up URLs\n   */\n];\n\n// TODO: use a centralized store for these fields that would be shared with the CM and CTB\nconst EXCLUDED_FIELDS = [\n  'id',\n  'documentId',\n  'locale',\n  'localizations',\n  'created_by',\n  'updated_by',\n  'created_at',\n  'updated_at',\n  'publishedAt',\n];\n\ninterface EncodingInfo {\n  data: any;\n  schema: Struct.Schema;\n}\n\nconst isObject = (value: unknown): value is Record<string, any> => {\n  return typeof value === 'object' && value !== null;\n};\n\nconst createContentSourceMapsService = (strapi: Core.Strapi) => {\n  return {\n    encodeField(text: string, key: string): string {\n      const res = vercelStegaCombine(text, {\n        // TODO: smarter metadata than just the key\n        key,\n      });\n      return res;\n    },\n\n    async encodeEntry({ data, schema }: EncodingInfo): Promise<any> {\n      if (!isObject(data) || data === undefined) {\n        return data;\n      }\n\n      return traverseEntity(\n        ({ key, value, attribute }, { set }) => {\n          if (!attribute || EXCLUDED_FIELDS.includes(key)) {\n            return;\n          }\n\n          if (ENCODABLE_TYPES.includes(attribute.type) && typeof value === 'string') {\n            set(key, this.encodeField(value, key) as any);\n          }\n        },\n        {\n          schema,\n          getModel: (uid) => strapi.getModel(uid as UID.Schema),\n        },\n        data\n      );\n    },\n\n    async encodeSourceMaps({ data, schema }: EncodingInfo): Promise<any> {\n      try {\n        if (Array.isArray(data)) {\n          return await Promise.all(\n            data.map((item) => this.encodeSourceMaps({ data: item, schema }))\n          );\n        }\n\n        if (!isObject(data)) {\n          return data;\n        }\n\n        return await this.encodeEntry({ data, schema });\n      } catch (error) {\n        strapi.log.error('Error encoding source maps:', error);\n        return data;\n      }\n    },\n  };\n};\n\nexport { createContentSourceMapsService };\n"],"names":["ENCODABLE_TYPES","EXCLUDED_FIELDS","isObject","value","createContentSourceMapsService","strapi","encodeField","text","key","res","vercelStegaCombine","encodeEntry","data","schema","undefined","traverseEntity","attribute","set","includes","type","getModel","uid","encodeSourceMaps","Array","isArray","Promise","all","map","item","error","log"],"mappings":";;;;;AAIA,MAAMA,eAAkB,GAAA;AACtB,IAAA,QAAA;AACA,IAAA,MAAA;AACA,IAAA,UAAA;AACA,IAAA,YAAA;AACA,IAAA,MAAA;AACA,IAAA,MAAA;AACA,IAAA,UAAA;AACA,IAAA,WAAA;AACA,IAAA,SAAA;AACA,IAAA,aAAA;AACA,IAAA,MAAA;AACA,IAAA,OAAA;AACA,IAAA,OAAA;AACA,IAAA;AASD,CAAA;AAED;AACA,MAAMC,eAAkB,GAAA;AACtB,IAAA,IAAA;AACA,IAAA,YAAA;AACA,IAAA,QAAA;AACA,IAAA,eAAA;AACA,IAAA,YAAA;AACA,IAAA,YAAA;AACA,IAAA,YAAA;AACA,IAAA,YAAA;AACA,IAAA;AACD,CAAA;AAOD,MAAMC,WAAW,CAACC,KAAAA,GAAAA;IAChB,OAAO,OAAOA,KAAU,KAAA,QAAA,IAAYA,KAAU,KAAA,IAAA;AAChD,CAAA;AAEA,MAAMC,iCAAiC,CAACC,MAAAA,GAAAA;IACtC,OAAO;QACLC,WAAYC,CAAAA,CAAAA,IAAY,EAAEC,GAAW,EAAA;YACnC,MAAMC,GAAAA,GAAMC,yBAAmBH,IAAM,EAAA;;AAEnCC,gBAAAA;AACF,aAAA,CAAA;YACA,OAAOC,GAAAA;AACT,SAAA;AAEA,QAAA,MAAME,WAAY,CAAA,CAAA,EAAEC,IAAI,EAAEC,MAAM,EAAgB,EAAA;AAC9C,YAAA,IAAI,CAACX,QAAAA,CAASU,IAASA,CAAAA,IAAAA,IAAAA,KAASE,SAAW,EAAA;gBACzC,OAAOF,IAAAA;AACT;AAEA,YAAA,OAAOG,0BACL,CAAA,CAAC,EAAEP,GAAG,EAAEL,KAAK,EAAEa,SAAS,EAAE,EAAE,EAAEC,GAAG,EAAE,GAAA;AACjC,gBAAA,IAAI,CAACD,SAAAA,IAAaf,eAAgBiB,CAAAA,QAAQ,CAACV,GAAM,CAAA,EAAA;AAC/C,oBAAA;AACF;gBAEA,IAAIR,eAAAA,CAAgBkB,QAAQ,CAACF,SAAAA,CAAUG,IAAI,CAAK,IAAA,OAAOhB,UAAU,QAAU,EAAA;AACzEc,oBAAAA,GAAAA,CAAIT,GAAK,EAAA,IAAI,CAACF,WAAW,CAACH,KAAOK,EAAAA,GAAAA,CAAAA,CAAAA;AACnC;aAEF,EAAA;AACEK,gBAAAA,MAAAA;AACAO,gBAAAA,QAAAA,EAAU,CAACC,GAAAA,GAAQhB,MAAOe,CAAAA,QAAQ,CAACC,GAAAA;aAErCT,EAAAA,IAAAA,CAAAA;AAEJ,SAAA;AAEA,QAAA,MAAMU,gBAAiB,CAAA,CAAA,EAAEV,IAAI,EAAEC,MAAM,EAAgB,EAAA;YACnD,IAAI;gBACF,IAAIU,KAAAA,CAAMC,OAAO,CAACZ,IAAO,CAAA,EAAA;AACvB,oBAAA,OAAO,MAAMa,OAAAA,CAAQC,GAAG,CACtBd,IAAKe,CAAAA,GAAG,CAAC,CAACC,IAAS,GAAA,IAAI,CAACN,gBAAgB,CAAC;4BAAEV,IAAMgB,EAAAA,IAAAA;AAAMf,4BAAAA;AAAO,yBAAA,CAAA,CAAA,CAAA;AAElE;gBAEA,IAAI,CAACX,SAASU,IAAO,CAAA,EAAA;oBACnB,OAAOA,IAAAA;AACT;AAEA,gBAAA,OAAO,MAAM,IAAI,CAACD,WAAW,CAAC;AAAEC,oBAAAA,IAAAA;AAAMC,oBAAAA;AAAO,iBAAA,CAAA;AAC/C,aAAA,CAAE,OAAOgB,KAAO,EAAA;AACdxB,gBAAAA,MAAAA,CAAOyB,GAAG,CAACD,KAAK,CAAC,6BAA+BA,EAAAA,KAAAA,CAAAA;gBAChD,OAAOjB,IAAAA;AACT;AACF;AACF,KAAA;AACF;;;;"}